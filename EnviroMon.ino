#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <LittleFS.h>
#include <DHT.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <Fonts/FreeSansBold9pt7b.h>
#include "certs.h"
#include <WiFiManager.h>
WiFiManager wifiManager;
// ---------------------- TFT SETUP ---------------------
#define TFT_CS     5
#define TFT_RST    4
#define TFT_DC     2
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

#define DARKGREY 0x31C6
#define MAX_TEMP 50.0  // Max expected temperature for scaling

// ---------------------- DHT SENSOR ---------------------
#define DHTPIN 13
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// ---------------------- WIFI + MQTT ---------------------
const char* ssid = "Galaxy M21 2021 Edition825A";
const char* password = "yuvi2000";
const char* mqtt_server = "a360nz7xihng0l-ats.iot.us-east-1.amazonaws.com";
const int mqtt_port = 8883;
const char* mqtt_topic = "enviroMon/data";

const uint32_t myImage[20 * 42] = {0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c310c3, 0x18c218c2, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c338c3, 0x89038903, 0x30c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3a0e4, 0xe904e904, 0x890418c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b904, 0xe904e904, 0xb10420c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b904, 0xe904e904, 0xb10420c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b904, 0xe904e904, 0xd1049103, 0x89038903, 0x89038903, 0x78e330c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe904e904, 0xe904e904, 0xe8e4e8e4, 0xe904e904, 0xe10458e3, 0x10c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xd904a903, 0xa104a104, 0xa104a104, 0x910430e3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xb10428c2, 0x20c320c3, 0x20c320c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xb10420c2, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xb10420c2, 0x10c210c3, 0x10c310c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xb90440e2, 0x38e238e3, 0x38c338c3, 0x30c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xe104d104, 0xd104d104, 0xd104d104, 0xc10448e3, 0x10c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xe104e104, 0xd904d904, 0xe104e0e4, 0xd10450e3, 0x10c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xc10458e2, 0x50e350e3, 0x50e350e3, 0x40e320c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xb10420c2, 0x10c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe8e4e904, 0xb10420c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe904e904, 0xb10420c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe904e904, 0xd10490e3, 0x88e48904, 0x89048904, 0x78e330c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b904, 0xe904e904, 0xe904f104, 0xf104f104, 0xf104f104, 0xe10560e3, 0x10c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b904, 0xe904e904, 0xd904a904, 0xa0e4a104, 0xa103a104, 0x890438e3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b904, 0xe904e904, 0xb10420c2, 0x18c318c2, 0x18c218c2, 0x18c218c2, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x20c3b8e4, 0xe904e904, 0xb0e420c2, 0x18c218c3, 0x18c318c2, 0x18c218c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c310c3, 0x30c3c104, 0xe904e904, 0xb90328c2, 0x10c218c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x18c310c3, 0x10c310c3, 0x10c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x10c328c3, 0x9904e104, 0xe904e904, 0xe1049103, 0x20c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x10c310c3, 0x18c318c3, 0x18c318c3, 
0x38e350e3, 0x58e358e3, 0x50e338c3, 0x20c318c3, 0x18c318c3, 0x10c310c2, 0x18c318c3, 0x18c380e4, 0xe104e904, 0xe904e904, 0xe904e104, 0x70e318c3, 0x18c318c2, 0x18c210c3, 0x10c310c3, 0x10c318c3, 0x20c338c3, 0x40e340e3, 0x38e320c3, 0x18c318c3, 
0xc104e104, 0xe104e104, 0xd904c904, 0xa10460e3, 0x40c340c3, 0x58e37904, 0x40e310c3, 0x28c3c104, 0xe904e904, 0xe904e904, 0xe904e8e4, 0xb0e420c3, 0x18c350e3, 0x890458e3, 0x40c338c3, 0x50e38903, 0xb104c904, 0xd104d104, 0xc904b104, 0x48e310c3, 
0xd904e904, 0xe904e904, 0xe904e8e4, 0xe904e104, 0xd104d104, 0xe104e904, 0x88e310c3, 0x30c3c904, 0xe904e904, 0xe904e904, 0xe904e8e4, 0xc10428c3, 0x20c3a104, 0xe903e103, 0xd104d104, 0xd904e904, 0xe904e904, 0xe8e4e904, 0xe904e904, 0x68e310c3, 
0xa104c104, 0xc104d104, 0xe104e904, 0xe904e904, 0xf0e4f0e4, 0xe904f104, 0x98e318c3, 0x20c3b104, 0xe904e904, 0xe904e904, 0xe904e904, 0xa90320c3, 0x28c3b104, 0xe903e903, 0xe904e904, 0xe904e904, 0xe904e904, 0xe104d104, 0xd904c904, 0x48e310c3, 
0x20c330e2, 0x30c338c3, 0x60e3a104, 0xc104d104, 0xd904d104, 0xc104a104, 0x50e318c3, 0x10c368e3, 0xd904e904, 0xe904e904, 0xe904d904, 0x58e318c2, 0x18c350e3, 0xa104c104, 0xd104d904, 0xd904d104, 0xb1048103, 0x50e340c2, 0x48c340e3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x10c320c3, 0x30c340e3, 0x40e338e3, 0x28c318c3, 0x10c318c3, 0x18c320c3, 0x78e4d104, 0xe104e104, 0xc90470e4, 0x18c218c2, 0x18c310c3, 0x18c328c3, 0x40e348e3, 0x48e338e3, 0x20c318c3, 0x10c310c3, 0x10c310c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c310c3, 0x10c310c3, 0x10c310c3, 0x10c310c3, 0x18c218c2, 0x18c340e3, 0x60e358e3, 0x38e318c3, 0x10c210c2, 0x18c318c3, 0x18c318c3, 0x10c310c2, 0x10c210c2, 0x10c310c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 
0x10c328e3, 0x690348e3, 0x18c310c3, 0x18c318c3, 0x18c328c3, 0x68e38903, 0x80e348e3, 0x18c218c2, 0x18c318c2, 0x10c220c3, 0x48e37904, 0x710448e3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x38c360e3, 0x690448e3, 0x20c318c3, 0x18c318c3, 0x18c318c3, 
0x10c360e3, 0xe103d104, 0x70e318c2, 0x10c318c2, 0x48e3b104, 0xe104e904, 0xe904d904, 0x810320c2, 0x10c310c3, 0x30c398e4, 0xd904e904, 0xe904d904, 0x90e428c3, 0x10c318c3, 0x20c370e4, 0xc904e104, 0xe904d904, 0x910430c3, 0x10c318c3, 0x18c318c3, 
0x10c368e3, 0xe904e904, 0xd9048903, 0x40e360e3, 0xc104e904, 0xe904e904, 0xe904e904, 0xe1049104, 0x38e348e3, 0xa904e904, 0xe904e904, 0xf0e4e8e4, 0xe9049903, 0x38e230e2, 0x8104d904, 0xe904e904, 0xe904e904, 0xe904a8e4, 0x30c318c3, 0x18c318c3, 
0x18c338e3, 0xa104e104, 0xe904e904, 0xd924e104, 0xe904e904, 0xc9049103, 0xa903e104, 0xe904e104, 0xd104d104, 0xe904e904, 0xd904a903, 0xa903e104, 0xe904e904, 0xc904c904, 0xe104e904, 0xe104b904, 0xb104d904, 0xe904e904, 0x790318c3, 0x18c318c3, 
0x18c318c2, 0x28c29104, 0xe104e8e4, 0xe904e904, 0xe904b904, 0x48e318c3, 0x28e28103, 0xd904e904, 0xe904e904, 0xe904d104, 0x68e320c2, 0x20c270e3, 0xd104e904, 0xe904e904, 0xe904e104, 0x88e328c2, 0x20c260e3, 0xd104e904, 0x810318c3, 0x18c318c3, 
0x18c318c3, 0x18c320c3, 0x70e3b104, 0xd104c104, 0x910338e2, 0x10c318c3, 0x18c320c2, 0x68e3b904, 0xd904d104, 0xa90358e3, 0x18c318c3, 0x18c318c3, 0x60e3b904, 0xd904d904, 0xc10470e3, 0x20c210c3, 0x18c318c3, 0x58e39903, 0x48e318c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c328c3, 0x38e330e3, 0x18c210c3, 0x18c318c3, 0x18c218c2, 0x18c228c2, 0x40e338e3, 0x20c218c2, 0x18c318c3, 0x18c318c3, 0x18c328e3, 0x48e348e3, 0x30e218c3, 0x18c318c3, 0x18c318c3, 0x18c218e2, 0x18c218c3, 0x18c318c3, 
0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c218c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c218c3, 0x10c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c210c2, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c2, 0x18c318c3, 0x18c318c3, 
0x18c318c3, 0x18c218c3, 0x18c318c3, 0x18c318c3, 0x18c318c2, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c2, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3, 0x18c318c3
};

WiFiClientSecure net;
PubSubClient client(net);

void setupCerts() {
  net.setCACert(AWS_ROOT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);
}

void drawMyImage(int startX, int startY) {
  int index = 0;
  for (int y = 0; y < 42; y++) {
    for (int x = 0; x < 20; x++) {
      uint32_t color = myImage[index++];
      tft.drawPixel(startX + x, startY + y, color);
    }
  }
}

void printStatus(String msg) {
  static int y = 40;  // start below header
  // Clear the status area (below header)
  tft.fillRect(0, 26, 160, 128, ST77XX_BLACK);
  tft.setTextColor(ST77XX_WHITE);
  tft.setCursor(0, y);
  tft.setTextSize(1);
  tft.print(msg);  // line spacing
}


void connectAWS() {
  while (!client.connected()) {
    Serial.print("Connecting to AWS IoT...");
    if (client.connect("EnviroMonClient")) {
      Serial.println(" connected!");
    } else {
      Serial.print(" failed, rc="); Serial.println(client.state());
      delay(2000);
    }
  }
}

// ---------------------- UI DRAWING ---------------------
float lastTemp = NAN;
float lastHum = NAN;

void drawHeader() {
  tft.fillRect(0, 0, 128, 25, DARKGREY);
  tft.setTextColor(ST77XX_WHITE);
  tft.setFont(&FreeSansBold9pt7b);
  tft.setCursor(10, 20);
  tft.print("EnviroMon");
}

void drawBarGraph(float temp, float hum) {
  // Clear graph area
  // Clear the status area (below header)
  tft.fillRect(0, 26, 160, 128, ST77XX_BLACK);

  // Temperature bar
  int tempFill = map(temp, 0, MAX_TEMP, 0, 100);
  tft.setCursor(10, 50);
  tft.setTextColor(ST77XX_RED); tft.setTextSize(1);
  tft.print("Temp: "); tft.print(temp, 1); tft.print("C");
  tft.drawRect(10, 60, 100, 15, ST77XX_WHITE);
  tft.fillRect(11, 61, tempFill, 13, ST77XX_RED);
  // Humidity bar
  int humFill = map(hum, 0, 100, 0, 100);
  tft.setCursor(10, 90);
  tft.setTextColor(ST77XX_CYAN);
  tft.print("Humidity: "); tft.print(hum, 1); tft.print("%");
  tft.drawRect(10, 100, 100, 15, ST77XX_WHITE);
  tft.fillRect(11, 101, humFill, 13, ST77XX_CYAN);
}

// ---------------------- TIMING ---------------------
unsigned long lastPublishTime = 0;
const unsigned long publishInterval = 60000; // 1 minute

// ---------------------- MAIN SETUP ---------------------
void setup() {
  Serial.begin(115200);
  dht.begin();
  tft.initR(INITR_BLACKTAB);
  tft.setRotation(1);
  tft.fillScreen(ST77XX_BLACK);
  drawHeader();

  printStatus("Initializing...");
  delay(500);

  printStatus("Mounting FS...");
  LittleFS.begin(true);
  delay(500);

  printStatus("Connecting Wi-Fi...");
  // Blocks and starts AP if needed
  if (!wifiManager.autoConnect("EnviroMon_AP")) {
    printStatus("Wi-Fi failed!");
    delay(3000);
    ESP.restart();
  }
  printStatus("Wi-Fi Connected!");
  printStatus("SSID: " + WiFi.SSID());
  printStatus("IP: " + WiFi.localIP().toString());  
  setupCerts();
  // printStatus("Connecting AWS...");
  // client.setServer(mqtt_server, mqtt_port);
  // connectAWS();
  // printStatus("AWS Connected.");
  
}

// ---------------------- MAIN LOOP ---------------------
void loop() {
  // if (!client.connected()) connectAWS();
  // client.loop();

  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  if (isnan(temp) || isnan(hum)) {
    Serial.println("DHT read failed");
    return;
  }
  // Update UI only if values change
  if (temp != lastTemp || hum != lastHum) {
    lastTemp = temp;
    lastHum = hum;
    drawBarGraph(temp, hum); 
    Serial.println("UI updated.");
  }
  drawMyImage(130, 25);
  // Publish to MQTT every minute
  // unsigned long now = millis();
  // if (now - lastPublishTime > publishInterval) {
  //   lastPublishTime = now;

  //   String payload = "{";
  //   payload += "\"temperature\":";
  //   payload += String(temp, 1);
  //   payload += ",\"humidity\":";
  //   payload += String(hum, 1);
  //   payload += "}";

  //   client.publish(mqtt_topic, payload.c_str());
  //   Serial.println("MQTT published: " + payload);
  // }

  delay(2000);  // Sensor polling interval
}
